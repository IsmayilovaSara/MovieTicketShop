// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20221121110422_intial")]
    partial class intial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Count")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("DataAccess.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer");

                    b.Property<double>("IMDbRating")
                        .HasColumnType("double precision");

                    b.Property<string>("ImgPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("Price")
                        .HasColumnType("double precision");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9788),
                            CreateUserId = 1,
                            IMDbRating = 7.2999999999999998,
                            ImgPath = "~/image/AntMan.jpg",
                            Name = "Ant-Man",
                            Note = "Description",
                            Price = 7.5
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9801),
                            CreateUserId = 1,
                            IMDbRating = 7.2000000000000002,
                            ImgPath = "~/image/Don'tLookUp.jpg",
                            Name = "Don't Look Up",
                            Note = "Description",
                            Price = 8.0
                        },
                        new
                        {
                            Id = 3,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9810),
                            CreateUserId = 1,
                            IMDbRating = 7.7999999999999998,
                            ImgPath = "~/image/Dunkirk.jpg",
                            Name = "Dunkirk",
                            Note = "Description",
                            Price = 10.0
                        },
                        new
                        {
                            Id = 4,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9819),
                            CreateUserId = 1,
                            IMDbRating = 6.5999999999999996,
                            ImgPath = "~/image/EnolaHolmes.jpg",
                            Name = "Enola Holmes",
                            Note = "Description",
                            Price = 6.0
                        },
                        new
                        {
                            Id = 5,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9828),
                            CreateUserId = 1,
                            IMDbRating = 6.5,
                            ImgPath = "~/image/FlatLiners.jpg",
                            Name = "Flatliners",
                            Note = "Description",
                            Price = 6.0
                        },
                        new
                        {
                            Id = 6,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9841),
                            CreateUserId = 1,
                            IMDbRating = 8.5999999999999996,
                            ImgPath = "~/image/Interstellar.jpg",
                            Name = "Interstellar",
                            Note = "Description",
                            Price = 10.0
                        },
                        new
                        {
                            Id = 7,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9850),
                            CreateUserId = 1,
                            IMDbRating = 8.4000000000000004,
                            ImgPath = "~/image/Joker.jpg",
                            Name = "Joker",
                            Note = "Description",
                            Price = 5.0
                        },
                        new
                        {
                            Id = 8,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9859),
                            CreateUserId = 1,
                            IMDbRating = 8.0,
                            ImgPath = "~/image/TheIncredibles.jpg",
                            Name = "The Incredibles",
                            Note = "Description",
                            Price = 4.5
                        },
                        new
                        {
                            Id = 9,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9868),
                            CreateUserId = 1,
                            IMDbRating = 7.0,
                            ImgPath = "~/image/ThePlatform.jpg",
                            Name = "The Platform",
                            Note = "Description",
                            Price = 8.5
                        },
                        new
                        {
                            Id = 10,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9877),
                            CreateUserId = 1,
                            IMDbRating = 6.5,
                            ImgPath = "~/image/ThorLoveandThunder.jpg",
                            Name = "Thor: Love and Thunder",
                            Note = "Description",
                            Price = 6.0
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(8404),
                            CreateUserId = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(8489),
                            CreateUserId = 1,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreateUserId")
                        .HasColumnType("integer");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateDate = new DateTime(2022, 11, 21, 15, 4, 22, 153, DateTimeKind.Local).AddTicks(9734),
                            CreateUserId = 1,
                            PasswordHash = "2����		�:��/�5oX���<f�E��7,��",
                            RoleId = 1,
                            Salt = "YYif+HvdHfgp5g==",
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Cart", b =>
                {
                    b.HasOne("DataAccess.Entities.Product", "Product")
                        .WithMany("Cart")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.User", "User")
                        .WithMany("Cart")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.HasOne("DataAccess.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccess.Entities.Product", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("DataAccess.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccess.Entities.User", b =>
                {
                    b.Navigation("Cart");
                });
#pragma warning restore 612, 618
        }
    }
}
